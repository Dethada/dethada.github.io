<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Network on David Zhu | Blog</title><link>https://dzhy.dev/tags/network/</link><description>Recent content in Network on David Zhu | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://dzhy.dev/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>SNI and ESNI</title><link>https://dzhy.dev/posts/2019-07-20-sni-esni/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>https://dzhy.dev/posts/2019-07-20-sni-esni/</guid><description>Prelude I have a DNS resolver setup at home which my home devices use and set it to use DNS over TLS (DoT) to resolve queries so ISPs and such can&amp;rsquo;t see the domains I&amp;rsquo;m visiting, but SNI is leaking out the sites I&amp;rsquo;m visiting and there&amp;rsquo;s nothing much I can do about it for now. ðŸ˜£
What is the Purpose of SNI Problem Name-based virtual hosting allows multiple DNS hostnames to be hosted by a single server (usually a web server) on the same IP address.</description><content:encoded><![CDATA[<h2 id="prelude">Prelude</h2>
<p>I have a DNS resolver setup at home which my home devices use and set it to use DNS over TLS (DoT) to resolve queries so ISPs and such can&rsquo;t see the domains I&rsquo;m visiting, but SNI is leaking out the sites I&rsquo;m visiting and there&rsquo;s nothing much I can do about it for now. ðŸ˜£</p>
<h2 id="what-is-the-purpose-of-sni">What is the Purpose of SNI</h2>
<h3 id="problem">Problem</h3>
<blockquote>
<p>Name-based virtual hosting allows multiple DNS hostnames to be hosted by a single server (usually a web server) on the same IP address. To achieve this, the server uses a hostname presented by the client as part of the protocol (for HTTP the name is presented in the host header). <a href="https://en.wikipedia.org/wiki/Server_Name_Indication">Source</a></p>
</blockquote>
<p>However, when using HTTPS, the TLS connection happens before the sending of any HTTP data, so we need another way of letting the server know which host we are connecting to so it can establish the TLS connection with the correct certificate.</p>
<h3 id="solution">Solution</h3>
<p>Server Name Indication (SNI) solves this by having the client send the hostname as part of the TLS handshake. This enables the server to establish the TLS connection with the correct certificate.</p>
<p>The hostname sent during TLS handshake is not encrypted, so eavesdroppers for example ISPs can see which sites you are visiting.</p>
<p>Here&rsquo;s a diagram to illustrate. ðŸ”’ Means that it is encrypted.

<div class="mermaid" align="center">
sequenceDiagram
    Client->>Server: ClientHello + SNI
    Server->>Client: ServerHello
    Client->>Server: FinishedðŸ”’
    Client->>Server: HTTP RequestðŸ”’
    Server->>Client: HTTP ResponseðŸ”’
</div>
</p>
<p>I have written a <a href="https://github.com/PotatoDrug/SNI-Sniffer">SNI Sniffer</a> (only tested on linux) to see this in effect, the code quality is pretty bad I&rsquo;ll update it when I have time.</p>
<pre tabindex="0"><code>âžœ sudo sni-sniffer -s eth0
Started capturing on ens33
TCP V4(192.168.14.128):50596 -&gt; V4(172.217.27.46):443
SNI: [
    &quot;google.com&quot;,
]
TCP V4(192.168.14.128):51262 -&gt; V4(117.18.232.200):443
SNI: [
    &quot;az764295.vo.msecnd.net&quot;,
]
TCP V4(192.168.14.128):45508 -&gt; V4(111.221.29.254):443
SNI: [
    &quot;vortex.data.microsoft.com&quot;,
]
TCP V4(192.168.14.128):40952 -&gt; V4(172.217.160.10):443
SNI: [
    &quot;safebrowsing.googleapis.com&quot;,
]
TCP V4(192.168.14.128):37934 -&gt; V4(35.166.72.120):443
SNI: [
    &quot;shavar.services.mozilla.com&quot;,
]
</code></pre><h2 id="esni">ESNIðŸ”’</h2>
<p>Encrypted SNI is an extension to TLS 1.3 and above which encrypts the SNI so eavesdroppers cannot see which sites you are visiting.</p>
<!-- raw HTML omitted -->
<p>The general idea of how ESNI works is the server publishes a public key on as a DNS record, which can be fetched by the client before connecting. The client then encrypts the SNI extension using a symmetric encryption key derived using the server&rsquo;s public key. The server can then decrypt it by deriving the same symmetric encryption key using it&rsquo;s private key.</p>
<p>For now the only browser I know that supports ESNI is Firefox, but it is not enabled by default, you have to enable it yourself, by going to <code>about:config</code> and setting <code>network.security.esni.enabled</code> to true.</p>
<p>The problem now is the server you are connecting to has to support ESNI as well, and there isn&rsquo;t much support for it software wise as the specifications for ESNI is still in draft. Even when the software support is there, most people are probably lazy to setup ESNI for their servers, currently the best/easiest solution is to use cloudflare as a reverse proxy as they have ESNI enabled by default.</p>
<p>Hopefully specifications for ESNI will be firmed up soon and more sites and browsers will start using ESNI.</p>
]]></content:encoded></item></channel></rss>